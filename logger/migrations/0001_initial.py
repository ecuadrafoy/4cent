# Generated by Django 3.1.1 on 2020-10-17 20:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('continent', models.CharField(max_length=10)),
                ('capital', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
            },
        ),
        migrations.CreateModel(
            name='event_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(help_text='Write the type of event, e.g. IED, protest, ambush, etc', max_length=40)),
            ],
            options={
                'verbose_name': 'Type of Event',
                'verbose_name_plural': 'Type of Event',
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_org', models.CharField(help_text='Please enter the name of this organization', max_length=40)),
                ('members', models.IntegerField(null=True)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PIR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PIR_number', models.CharField(blank=True, max_length=50, verbose_name='PIR Number and Value')),
                ('description', models.CharField(help_text='Describe the PIR', max_length=40)),
            ],
            options={
                'verbose_name': 'PIR',
                'verbose_name_plural': 'PIR',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_name', models.CharField(max_length=40, verbose_name='Source name')),
                ('reliability', models.CharField(blank=True, choices=[('A', 0), ('B', 1), ('C', 2), ('D', 3), ('E', 4), ('F', 5)], max_length=40, verbose_name='Reliability level')),
                ('nationality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='logger.country')),
            ],
        ),
        migrations.CreateModel(
            name='Traffic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docname', models.CharField(default='', help_text='Enter title of document', max_length=100)),
                ('traffic_slug', models.SlugField(max_length=250, unique_for_date='docdate')),
                ('docdate', models.DateTimeField(default=django.utils.timezone.now)),
                ('fulltext', models.TextField(help_text='Enter the full traffic text if possible')),
                ('grids', models.CharField(blank=True, help_text='Assign grid location', max_length=40, validators=[django.core.validators.RegexValidator(code='invalid_coordinate', message='Please enter a valid MGRS Coordinate.', regex='^\\d{1,2}[^ABIOYZabioyz][A-Za-z]{2}([0-9][0-9])+$')])),
                ('status', models.CharField(choices=[('live', 'Live'), ('completed', 'Completed'), ('to_verify', 'To Verify')], default='to_verify', max_length=10)),
                ('PIR', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='logger.pir')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='logger.event_type')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='logger.source')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Traffic',
                'verbose_name_plural': 'Traffic',
                'ordering': ('-docdate',),
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('body', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('traffic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='logger.traffic')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='EventMatrix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=40)),
                ('deceased', models.IntegerField()),
                ('wounded', models.IntegerField()),
                ('actor_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attacker', to='logger.organizations')),
                ('actor_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='victim', to='logger.organizations')),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='logger.event_type')),
                ('reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='logger.traffic')),
            ],
            options={
                'verbose_name_plural': 'Event Matrix',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Please enter the name of the piece of equipment observed', max_length=40)),
                ('role', models.CharField(blank=True, help_text='Write the role for this piece of equipment (e.g. MBT, APC, IFV, etc.)', max_length=40)),
                ('origin_manufacture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='logger.country')),
                ('unit', models.ManyToManyField(to='logger.Organizations')),
            ],
        ),
    ]
